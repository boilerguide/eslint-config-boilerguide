<?xml version="1.0"?>
<ruleset name="Symfony2">
    <config name="installed_paths" value="../../../vendor/escapestudios/symfony2-coding-standard,../../../HolmesMedia,../../../vendor/holmesmedia/quality-tools"/>
    <description>Sniffs for Symfony2 coding standard</description>
    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*/docs/*</exclude-pattern>
    <exclude-pattern>*/.git/*</exclude-pattern>
    <exclude-pattern>*.js</exclude-pattern>
    <exclude-pattern>*.css</exclude-pattern>
    <exclude-pattern>*/public/*</exclude-pattern>
    <exclude-pattern>*/.idea/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>

    <rule ref="PSR1"/>
    <rule ref="PSR2">
        <!-- exclude superfluous whitespace because it moans about the empty lines in phpdoc ("* " lines) -->
        <exclude name="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    </rule>
    <rule ref="HolmesMedia"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>

    <!-- We provide our own subclass of PEAR's ClassComment and FunctionComment sniff, but these will do: -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- do not check line length -->
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>

    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine">
        <severity>0</severity>
    </rule>

    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>

    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingParamComment">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.SpacingBeforeTags">
        <message>There should always be a description, followed by a blank line, before the tags of a class comment.</message>
    </rule>
</ruleset>
